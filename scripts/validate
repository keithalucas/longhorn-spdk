#!/bin/bash
set -e

cd "$(dirname $0)"/..

./generate_grpc.sh
set +e

echo Running proto validation

output=$(git diff --stat|grep -e '.pb.go' -e '_pb2.py' -e '_pb2_grpc.py')
if [ $? -eq 0 ]
then
	echo $output
	echo GRPC generated code is not up to date
	exit 1
fi

echo Running go validation

PACKAGES="$(find . -name '*.go' -print0 | xargs -0 -I{} dirname {} |  cut -f2 -d/ | sort -u | grep -Ev '(^\.$|.git|.trash-cache|vendor|bin)' | sed -e 's!^!./!' -e 's!$!/...!')"
echo Packages: ${PACKAGES}

echo Running: go vet
go vet ${PACKAGES}

if [ ! -z "${DRONE_REPO}" ] && [ ! -z "${DRONE_PULL_REQUEST}" ];
then
	wget https://github.com/$DRONE_REPO/pull/$DRONE_PULL_REQUEST.patch
	echo "Running: golangci-lint run --new-from-patch=${DRONE_PULL_REQUEST}.patch"
	golangci-lint run --new-from-patch="${DRONE_PULL_REQUEST}.patch"
	rm "${DRONE_PULL_REQUEST}.patch"
else
	git symbolic-ref -q HEAD && REV="origin/HEAD" || REV="HEAD^"
	headSHA=$(git rev-parse --short=12 ${REV})
	echo "Running: golangci-lint run --new-from-rev=${headSHA}"
	golangci-lint run --new-from-rev=${headSHA}
fi

echo Running: go fmt
test -z "$(go fmt ${PACKAGES} | tee /dev/stderr)"
